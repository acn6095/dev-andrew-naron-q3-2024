<!-- banner-promo section -->

{% comment %} Section javascript {% endcomment %}

{% javascript %}

  /*
    This script displays the banner promos based on the URL matching one of the following:
    1. discount parameter
    2. utm_medium parameter
    3. discount pathname; Shopify immediately redirects the user on page arrival; code checks Shopify's discount_code cookie instead

    When a banner is closed, the closed banner will not display again unless the user navigates to a URL with a matching discount or utm_medium parameter.
  */

  /****** Cookie functions ******/

  //setCookie function from w3schools (https://www.w3schools.com/js/js_cookies.asp)
  function setCookie(cname, cvalue, exdays) {
    const d = new Date()
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000))
    let expires = "expires="+d.toUTCString()
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/"
  }

  //getCookie function from w3schools (https://www.w3schools.com/js/js_cookies.asp)
  function getCookie(cname) {
    let name = cname + "="
    let ca = document.cookie.split(';')
    for(let i = 0; i < ca.length; i++) {
      let c = ca[i]
      while (c.charAt(0) == ' ') {
        c = c.substring(1)
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length)
      }
    }
    return ""
  }

  /****** Global variables ******/

  //declare closed banners cookie
  let closedDiscountBanners = getCookie('closed_banners')

  let closedDiscountBannersArray = closedDiscountBanners.split(",")

  //declare active banner is displayed variable
  let activeBannerDisplayed = false

  //declare empty array for banner promos to be added to cookie
  let activeCodeArray = []

  //declare empty variable to store cookie string for banner promos
  let activeBannerString = getCookie('active_banners')

  /****** URL check logic ******/

  //check URL
  if (window.location) {

    /****** Discount code cookie check ******/

    //declare discountCodeFound variable
    let discountCodeFound

    //declare cookie variable
    let discountCookie = getCookie("discount_code")
    if (closedDiscountBannersArray.includes(discountCookie)) {
      discountCodeFound = false
    } else {
      discountCodeFound = discountCookie
    }

    /****** Check for search parameters ******/
    let hasSearch = false
    let utmMediumParam = false
    let discountCodeParam = false

    if (window.location.search) {
      hasSearch = true
      //get url parameter to a string
      const urlCurrentSearch = window.location.search
      const urlParams = new URLSearchParams(urlCurrentSearch)
      utmMediumParam = urlParams.get('utm_medium')
      discountCodeParam = urlParams.get('discount')
    }

    /****** Display active banner ******/

    //check that active banner cookie is not empty
    if (activeBannerString) {
      //split string from active cookie value
      let activeBannerArray = activeBannerString.split(',')

      //push active codes to activeCodeArray
      activeBannerArray.forEach((item) => {
        activeCodeArray.push(item)
      })

      //render most recently visited banner promo based on cookie
      if (activeCodeArray !== null && !utmMediumParam && !discountCodeParam) {
        let activeBanner = activeBannerArray.pop()
        let matchedActiveBanner = document.querySelector(`[data-utm-medium="${activeBanner}"]`)
        //conditional to check for discount_code instead of utm_medium
        if (!matchedActiveBanner) { 
          matchedActiveBanner = document.querySelector(`[data-discount-code="${activeBanner}"]`)
        }
        //changes classes to display banner
        matchedActiveBanner.classList.remove('-top-full')
        matchedActiveBanner.classList.add('top-0')
        //sets variable to true to prevent other banners from displaying
        activeBannerDisplayed = true
      }
    }
    
    if (hasSearch) {
      /****** Utm medium parameter check ******/

      //declare empty array to store multiple utm_medium values
      let utmValueArray = []

      //conditional to only run when utm_medium parameter is detected
      if (utmMediumParam) {
        //get all banner promos
        let bannerUtmMediums = document.querySelectorAll('[data-utm-medium]')
        //push all [data-utm-medium] values into empty array
        bannerUtmMediums.forEach((banner) => {
          utmValueArray.push(banner.dataset.utmMedium)
        })
        //check for matching strings
        let matchedResult = utmValueArray.includes(`${utmMediumParam}`)
        //if true, display banner
        if (matchedResult) {
          let matchedBanner = document.querySelector(`[data-utm-medium="${utmMediumParam}"]`)
          //set values for active banner cookie
          activeCodeArray.push(matchedBanner.dataset.discountCode)
          activeCodeArray.push(matchedBanner.dataset.utmMedium)
          //change classes to display banner
          if (!activeBannerDisplayed) {
            matchedBanner.classList.remove('-top-full')
            matchedBanner.classList.add('top-0')
            activeBannerDisplayed = true
          }
        }
      }

      /****** Discount code parameter check ******/

      //check for discount URL parameter
      if (discountCodeParam) {
        discountCodeFound = discountCodeParam

        //remove parameter discount code from closed banners cookie
        if (closedDiscountBannersArray.includes(discountCodeFound)) {
          closedDiscountBannersArray = closedDiscountBannersArray.filter(item => !discountCodeFound.includes(item))
        }
        //Set closed discount banner cookie
        setCookie('closed_banners', closedDiscountBannersArray)
      }
    }

    //only run if discount code is found
    if (discountCodeFound) {
      //declare empty array for discount cookie dataset values
      let discountCodeValues = []
      //push all [data-discount-code] values into empty array
      let bannerDiscountCodes = document.querySelectorAll('[data-discount-code]')
      bannerDiscountCodes.forEach((banner) => {
        discountCodeValues.push(banner.dataset.discountCode)
      })
      //check for matching strings
      let matchedCode = discountCodeValues.includes(`${discountCodeFound}`)
      //if true, display banner
      if (matchedCode) {
        let matchedCodeBanner = document.querySelector(`[data-discount-code="${discountCodeFound}"]`)
        //set values for active banner cookie
        activeCodeArray.push(matchedCodeBanner.dataset.discountCode)
        activeCodeArray.push(matchedCodeBanner.dataset.utmMedium)
        //change classes to display banner
        if (!activeBannerDisplayed) {
          matchedCodeBanner.classList.remove('-top-full')
          matchedCodeBanner.classList.add('top-0')
          activeBannerDisplayed = true
        }
      }
    }
  }

  //clean active banner promo value array of duplicates
  let cleanedArray = [...new Set(activeCodeArray)]

  //Set active banner promo cookie
  setCookie('active_banners', cleanedArray)

  /****** Close banner logic ******/

  //Event listener to trigger close animation on banner promo
  let closeButtons = document.querySelectorAll('[data-close]')
  closeButtons.forEach((closeButton) => {
    closeButton.addEventListener(('click'), (e) => {
    e.preventDefault()
    let parentBanner = closeButton.closest('[data-banner-promo]')
    parentBanner.classList.remove('top-0')
    parentBanner.classList.add('-top-full')
    //remove closed values from active promo array
    let discountCodeRemoved = parentBanner.dataset.discountCode
    let utmMediumRemoved = parentBanner.dataset.utmMedium
    let valuesRemoved = [discountCodeRemoved,utmMediumRemoved]
    let removedArray = cleanedArray.filter((item) => {
        return !valuesRemoved.includes(item)
    })
    //Set active banner promo cookie
    setCookie('active_banners', removedArray)
    //Update cleanedArray
    cleanedArray = removedArray
    //clean closed banner array
    closedDiscountBannersArray.push(discountCodeRemoved)
    let cleanedCloseBanners = [...new Set(closedDiscountBannersArray)]
    //Set closed discount banner cookie
    setCookie('closed_banners', cleanedCloseBanners)
    })
  })

 {% endjavascript %}

{% comment %} Section styling {% endcomment %}

{% for block in section.blocks %}
  <div
    data-banner-promo
    data-discount-code="{{ block.settings.logic_discount_code }}"
    data-utm-medium="{{ block.settings.logic_utm_medium }}"
    class="absolute w-full bg-[{{ block.settings.background_color }}] text-[{{ block.settings.text_color }}] transition-all duration-700 ease-in-out{% unless request.design_mode %} -top-full{% endunless %}"
    {{ block.shopify_attributes }}
  >
    <div class="container mx-auto p-4 flex {{ block.settings.message_text_alignment }}">
      <span>{{ block.settings.message_text }}</span>
      <button data-close class="px-4">{{ block.settings.button_text }}</button>
    </div>
  </div>
{% endfor %}

{% schema %}
  {
    "name": "Banner promo",
    "tag": "section",
    "settings": [
      {
        "type": "header",
        "content": "Banner promos",
        "info": "Use blocks to populate banner promos."
      }
    ],
    "blocks": [
      {
        "name": "Promo",
        "type": "promo",
        "settings": [
          {
            "type": "header",
            "content": "Banner styling"
          },
          {
            "type": "color",
            "id": "background_color",
            "label": "Background color",
            "default": "#2f73da"
          },
          {
            "type": "color",
            "id": "text_color",
            "label": "Text color",
            "default": "#ffffff"
          },
          {
            "type": "header",
            "content": "Banner content"
          },
          {
            "type": "inline_richtext",
            "id": "message_text",
            "label": "Message text",
            "default": "Your 15% off discount code GIVEMEAJOB will auto-apply at checkout."
          },
          {
            "type": "text",
            "id": "button_text",
            "label": "Button text",
            "default": "close"
          },
          {
            "type": "select",
            "id": "message_text_alignment",
            "label": "Message text alignment",
            "options": [
              {
                "value": "justify-between",
                "label": "Left"
              },
              {
                "value": "justify-center",
                "label": "Center"
              },
              {
                "value": "justify-end",
                "label": "Right"
              }
            ],
            "default": "justify-between"
          },
          {
            "type": "header",
            "content": "Banner logic",
            "info": "Set url parameters to trigger banner promo appearance"
          },
          {
            "type": "text",
            "id": "logic_utm_medium",
            "label": "UTM medium",
            "default": "social"
          },
          {
            "type": "text",
            "id": "logic_discount_code",
            "label": "Discount code",
            "default": "GIVEMEAJOB"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Banner promo",
        "blocks": [
          {
            "type": "promo",
          },
          {
            "type": "promo",
          },
          {
            "type": "promo",
          }
        ]
      }
    ]
  }
{% endschema %}